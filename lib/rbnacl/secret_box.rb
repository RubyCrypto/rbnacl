# encoding: binary
require 'rbnacl/secret_box/xsalsa20_poly1305'
module Crypto
  # The SecretBox class boxes and unboxes messages. The underlying primitive
  # used is Crypto::SecretBox::XSalsa20Poly1305. More specific documentation
  # can be found there.
  #
  # This class uses the given secret key to encrypt and decrypt messages.
  #
  # It is VITALLY important that the nonce is a nonce, i.e. it is a number used
  # only once for any given pair of keys.  If you fail to do this, you
  # compromise the privacy of the messages encrypted. Give your nonces a
  # different prefix, or have one side use an odd counter and one an even counter.
  # Just make sure they are different.
  #
  # The ciphertexts generated by this class include a 16-byte authenticator which
  # is checked as part of the decryption.  An invalid authenticator will cause
  # the unbox function to raise.  The authenticator is not a signature.  Once
  # you've looked in the box, you've demonstrated the ability to create
  # arbitrary valid messages, so messages you send are repudiatable.  For
  # non-repudiatable messages, sign them before or after encryption.
  class SecretBox
    # The default primitive to use
    DEFAULT_PRIMITIVE = SecretBox::XSalsa20Poly1305

    # Create a new SecretBox
    #
    # Sets up the Box with a secret key fro encrypting and decrypting messages.
    #
    # @param key [String] The key to encrypt and decrypt with
    # @param encoding [Symbol] Parse key from the given encoding
    #
    # @raise [Crypto::LengthError] on invalid keys
    #
    # @return [Crypto::SecretBox] The new Box, ready to use
    def self.new(key, encoding = :raw)
      DEFAULT_PRIMITIVE.new(key, encoding)
    end
  end
end
